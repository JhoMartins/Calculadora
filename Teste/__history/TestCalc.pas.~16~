unit TestCalc;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Calc;

type
  // Test methods for class TCalc

  TestTCalc = class(TTestCase)
  strict private
    FCalc: TCalc;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdicao;
    procedure TestAdicaoUmNumeroNegativo;
    procedure TestAdicaoDoisNumerosNegativos;
    procedure TesteSubtracaoNumerosPositivos;
    procedure TestSubtracaoUmNumeroNegativo;
    procedure TestSubtracaoDoisNumerosNegativos;
    procedure TestMultiplicacaoNumerosPositivos;
    procedure TestMultipicacaoUmNumeroNegativo;
    procedure TestMultiplicacaoDoisNumerosNegativos;
    procedure TesteDivisaoNumerosPositivos;
    procedure TesteDivisaoUmNumeroNegativo;
    procedure TesteDivisaoDoisNumerosNegativos;
    procedure TesteDivisaoPrimeiroNumeroZero;
    procedure TesteDivisaoPorZero;
  end;

implementation

procedure TestTCalc.SetUp;
begin
  FCalc := TCalc.Create;
end;

procedure TestTCalc.TearDown;
begin
  FCalc.Free;
  FCalc := nil;
end;

procedure TestTCalc.TestAdicao;
begin
  CheckEquals(25,FCalc.Adicao(10,15));
end;

procedure TestTCalc.TestAdicaoDoisNumerosNegativos;
begin
  CheckEquals(-15,FCalc.Adicao(-10,-5));
end;

procedure TestTCalc.TestAdicaoUmNumeroNegativo;
begin
  CheckEquals(5,FCalc.Adicao(10,-5));
  CheckEquals(6,FCalc.Adicao(-4,10));
end;

procedure TestTCalc.TesteDivisaoDoisNumerosNegativos;
begin
  CheckEquals(2,FCalc.Divisao(-20,-10));
end;

procedure TestTCalc.TesteDivisaoNumerosPositivos;
begin
  CheckEquals(2,FCalc.Divisao(20,10));
end;

procedure TestTCalc.TesteDivisaoPorZero;
begin
   CheckEquals(0,FCalc.Divisao(10,0));
end;

procedure TestTCalc.TesteDivisaoPrimeiroNumeroZero;
begin
   CheckEquals(0,FCalc.Divisao(0,10));
end;

procedure TestTCalc.TesteDivisaoUmNumeroNegativo;
begin
   CheckEquals(-2,FCalc.Divisao(-20,10));
   CheckEquals(-5,FCalc.Divisao(20,-4));
end;

procedure TestTCalc.TesteSubtracaoNumerosPositivos;
begin
   CheckEquals(5,FCalc.Subtracao(10,5));
end;

procedure TestTCalc.TestMultipicacaoUmNumeroNegativo;
begin
   CheckEquals(-20,FCalc.Mult(-2,10));
   CheckEquals(-30,FCalc.Mult(3,-10));
end;

procedure TestTCalc.TestMultiplicacaoDoisNumerosNegativos;
begin
    CheckEquals(50,FCalc.Mult(-5,-10));
end;

procedure TestTCalc.TestMultiplicacaoNumerosPositivos;
begin
    CheckEquals(50,FCalc.Mult(5,10));
end;

procedure TestTCalc.TestSubtracaoDoisNumerosNegativos;
begin
  CheckEquals(-5,FCalc.Subtracao(-10,-5));
end;

procedure TestTCalc.TestSubtracaoUmNumeroNegativo;
begin
  CheckEquals(15,FCalc.Subtracao(10,-5));
  CheckEquals(-10,FCalc.Subtracao(-5,5)) ;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTCalc.Suite);
end.

